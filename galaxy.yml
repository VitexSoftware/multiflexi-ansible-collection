namespace: vitexus
name: multiflexi
version: 1.0.2

readme: README.md
authors:
  - Vítězslav Dvořák <vitex@vitexsoftware.com>

description: This is a collection of roles for managing a MultiFlexi server

license:
  - MIT

# The path to the license file for the collection. This path is relative to the root of the collection. This key is
# mutually exclusive with 'license'
license_file: ''

# A list of tags you want to associate with the collection for indexing/searching. A tag name has the same character
# requirements as 'namespace' and 'name'
tags:
  - application
  - multiflexi
  - server
  - flexibee
  - accounting
  - erp

# Collections that this collection requires to be installed for it to be usable. The key of the dict is the
# collection label 'namespace.name'. The value is a version range
# L(specifiers,https://python-semanticversion.readthedocs.io/en/latest/#requirement-specification). Multiple version
# range specifiers can be set and are separated by ','
dependencies: {}

repository: https://github.com/VitexSoftware/multiflexi-ansible-collection
documentation: http://docs.vitexsoftware.cz/multiflexi-ansible-collection/

homepage: http://multiflexi.eu/

issues: https://github.com/VitexSoftware/multiflexi-ansible-collection/issues

# A list of file glob-like patterns used to filter any files or directories that should not be included in the build
# artifact. A pattern is matched from the relative path of the file or directory of the collection directory. This
# uses 'fnmatch' to match the files or directories. Some directories and files like 'galaxy.yml', '*.pyc', '*.retry',
# and '.git' are always filtered. Mutually exclusive with 'manifest'
build_ignore:
  - '.venv'
  - '.venv/*'
  - '__pycache__'
  - '__pycache__/*'
  - '**/__pycache__'
  - '**/__pycache__/*'
  - '.vscode'
  - '.vscode/*'
  - '.devcontainer'
  - '.devcontainer/*'
  - '.ansible'
  - '.ansible/*'
  - 'test-requirements.txt'
  - 'tox-ansible.ini'
  - '.isort.cfg'
  - '*.tar.gz'
  - 'WARP.md'

# A dict controlling use of manifest directives used in building the collection artifact. The key 'directives' is a
# list of MANIFEST.in style
# L(directives,https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands). The key
# 'omit_default_directives' is a boolean that controls whether the default directives are used. Mutually exclusive
# with 'build_ignore'
# manifest: null
